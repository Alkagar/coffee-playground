// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.onload = function() {
    var Alien, Application, GameBoard, Player, director;
    GameBoard = (function() {

      GameBoard.width = 900;

      GameBoard.height = 600;

      function GameBoard() {}

      return GameBoard;

    })();
    Player = (function(_super) {

      __extends(Player, _super);

      Player.bullets = [];

      Player.score = 0;

      Player.hp = 100;

      Player.prototype.startX = 0;

      Player.prototype.startY = 0;

      Player.prototype.speed = 8;

      Player.prototype.moveVector = [0, 0, 0, 0];

      Player.prototype.bulletsShot = 0;

      function Player(_scene) {
        var playerImage;
        this._scene = _scene;
        Player.__super__.constructor.apply(this, arguments);
        playerImage = new CAAT.SpriteImage().initialize(director.getImage('player'), 1, 1);
        this.setLocation(this.startX, this.startY).setFillStyle('#ff5588').setBackgroundImage(playerImage.getRef(), true).setScale(0.5, 0.5).enableKeyboardControlsForObject();
        this.enableCollisions();
        this._scene.addChild(this);
      }

      Player.prototype.checkCollisionsWith = function(alien) {
        if (alien.x < (this.x + this.width) && alien.x > this.x && alien.y < (this.y + this.height) && alien.y > this.y) {
          alien.destroy();
          Player.hp = Player.hp - alien.attackPower;
          if (Player.hp <= 0) {
            alert('Game Over');
            return location.reload();
          }
        }
      };

      Player.prototype.enableCollisions = function() {
        var self;
        self = this;
        return this._scene.createTimer(this._scene.time, Number.MAX_VALUE, null, function(sceneTime, timerTime, taskObject) {
          var alien, bullet, _i, _len, _ref, _results;
          _ref = Application.aliens;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            alien = _ref[_i];
            self.checkCollisionsWith(alien);
            _results.push((function() {
              var _j, _len1, _ref1, _results1;
              _ref1 = Player.bullets;
              _results1 = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                bullet = _ref1[_j];
                _results1.push(alien.checkCollisionsWith(bullet));
              }
              return _results1;
            })());
          }
          return _results;
        }, null);
      };

      Player.prototype.enableKeyboardControlsForObject = function() {
        var ms, self;
        self = this;
        CAAT.registerKeyListener(function(keyEvent) {
          if (keyEvent.getKeyCode() === CAAT.Keys.UP) {
            self.moveVector[2] = keyEvent.getAction() === 'down' ? 1 : 0;
          }
          if (keyEvent.getKeyCode() === CAAT.Keys.DOWN) {
            self.moveVector[3] = keyEvent.getAction() === 'down' ? 1 : 0;
          }
          if (keyEvent.getKeyCode() === CAAT.Keys.LEFT) {
            self.moveVector[0] = keyEvent.getAction() === 'down' ? 1 : 0;
          }
          if (keyEvent.getKeyCode() === CAAT.Keys.RIGHT) {
            self.moveVector[1] = keyEvent.getAction() === 'down' ? 1 : 0;
          }
          if (keyEvent.getKeyCode() === CAAT.Keys.a) {
            return self.bulletsShot = 1;
          }
        });
        ms = 0;
        return this._scene.createTimer(this._scene.time, 1, function(sceneTime, timerTime, taskObject) {
          ms += 1;
          taskObject.reset(sceneTime);
          self.x += self.speed * (self.moveVector[1] - self.moveVector[0]);
          self.y += self.speed * (self.moveVector[3] - self.moveVector[2]);
          if (self.x + self.width > GameBoard.width) {
            self.x = GameBoard.width - self.width;
          }
          if (self.x < 0) {
            self.x = 0;
          }
          if (self.y + self.height > GameBoard.height) {
            self.y = GameBoard.height - self.height;
          }
          if (self.y < 0) {
            self.y = 0;
          }
          if (ms % 20 === 0 && self.bulletsShot > 0) {
            self.fireGun();
            return self.bulletsShot = 0;
          }
        }, null, null);
      };

      Player.prototype.fireGun = function() {
        var behavior, bullet, bullets, movePath, startPointX, startPointY;
        bullet = new CAAT.ShapeActor().setShape(CAAT.ShapeActor.prototype.SHAPE_CIRCLE).setSize(5, 5).setFillStyle('yellow');
        startPointX = this.x + this.width / 2;
        startPointY = this.y + this.height / 2;
        movePath = new CAAT.LinearPath().setInitialPosition(startPointX, startPointY).setFinalPosition(startPointX + GameBoard.width, startPointY);
        behavior = new CAAT.PathBehavior().setPath(movePath).setFrameTime(this._scene.time, 4000);
        bullet.addBehavior(behavior);
        bullets = [bullet];
        Player.bullets = Player.bullets.concat(bullets);
        return this._scene.addChild(bullet);
      };

      return Player;

    })(CAAT.Actor);
    Alien = (function(_super) {

      __extends(Alien, _super);

      Alien.prototype.speed = 8;

      Alien.prototype.attackPower = 5;

      Alien.prototype.moveVector = [0, 0, 0, 0];

      Alien.prototype.lifeTime = 5000;

      function Alien(_scene) {
        var alienImage;
        this._scene = _scene;
        Alien.__super__.constructor.apply(this, arguments);
        this.setLocation(100, 100).setDiscardable(true).setFrameTime(this._scene.time, this.lifeTime);
        alienImage = new CAAT.SpriteImage().initialize(director.getImage('alien'), 1, 1);
        this.setBackgroundImage(alienImage.getRef(), true).setLocation(GameBoard.width + this.width, 200);
        this._scene.addChild(this);
        this.attack();
      }

      Alien.prototype.checkCollisionsWith = function(bullet) {
        if (bullet.x < (this.x + this.width) && bullet.x > this.x && bullet.y < (this.y + this.height) && bullet.y > this.y) {
          this.destroy();
          bullet.setFrameTime(0, 0).setLocation(-100, -100);
          return Player.score = Player.score + 1;
        }
      };

      Alien.prototype.destroy = function() {
        return this.setFrameTime(0, 0).setLocation(-100, -100);
      };

      Alien.prototype.attack = function() {
        var behavior, endPoint, movePath, startPoint;
        startPoint = Math.random() * (GameBoard.height - this.height);
        endPoint = Math.random() * (GameBoard.height - this.height);
        movePath = new CAAT.LinearPath().setInitialPosition(GameBoard.width, startPoint).setFinalPosition(-30, endPoint);
        behavior = new CAAT.PathBehavior().setPath(movePath).setFrameTime(director.time, this.lifeTime);
        return this.addBehavior(behavior);
      };

      return Alien;

    })(CAAT.Actor);
    Application = (function(_super) {

      __extends(Application, _super);

      Application.prototype.playerHpText = null;

      Application.prototype.playerScoreText = null;

      Application.aliens = [];

      function Application() {
        Application.__super__.constructor.apply(this, arguments);
        this.initialize(GameBoard.width, GameBoard.height);
        document.getElementById('animation-place').appendChild(this.canvas);
      }

      Application.prototype.getScene = function() {
        return this.scene = director.createScene();
      };

      Application.prototype.setActorContainer = function() {
        this.container = new CAAT.ActorContainer().setBounds(0, 0, this.width, this.height).setFillStyle('#000');
        this.scene.addChild(this.container);
        return this.container;
      };

      Application.prototype.preloadApplication = function() {
        var self;
        self = this;
        return new CAAT.ImagePreloader().loadImages([
          {
            id: 'player',
            url: 'gfx/player.png'
          }, {
            id: 'alien',
            url: 'gfx/alien.png'
          }
        ], function(counter, images) {
          self.setImagesCache(images);
          return self.start();
        });
      };

      Application.prototype.insertAliens = function() {
        var ticker;
        ticker = 0;
        return this.scene.createTimer(this.scene.time, Number.MAX_VALUE, null, function(sceneTime, timerTime, taskObject) {
          var aliens, i, randomCount, randomTime;
          randomTime = Math.round(Math.random() * 500);
          randomCount = Math.round(Math.random() * 2);
          ticker += 1;
          if ((ticker % randomTime) === 0) {
            aliens = (function() {
              var _i, _results;
              _results = [];
              for (i = _i = 1; 1 <= randomCount ? _i <= randomCount : _i >= randomCount; i = 1 <= randomCount ? ++_i : --_i) {
                _results.push(new Alien(this.scene));
              }
              return _results;
            }).call(this);
            return Application.aliens = Application.aliens.concat(aliens);
          }
        }, null);
      };

      Application.prototype.start = function() {
        var self, startG;
        self = this;
        CAAT.loop(60);
        this.getScene();
        this.setActorContainer();
        startG = new CAAT.TextActor();
        this.scene.addChild(startG);
        return startG.setFont("20px Lucida sans").setLocation(GameBoard.width / 2, GameBoard.height / 2).setOutline(false).enableEvents(true).setText('Start Game').mouseClick = function(mouseEvent) {
          return self.startGame();
        };
      };

      Application.prototype.startGame = function() {
        var ind, player;
        this.getScene();
        ind = this.getSceneIndex(this.scene);
        this.setActorContainer();
        this.easeIn(ind);
        player = new Player(this.scene);
        this.insertAliens();
        this.setPlayerHpText();
        this.setPlayerScoreText();
        this.scene.addChild(this.playerHpText);
        this.scene.addChild(this.playerScoreText);
        return this.createTextsTimer(this.playerHpText, this.playerScoreText);
      };

      Application.prototype.createTextsTimer = function(hp, score) {
        var self;
        self = this;
        return this.scene.createTimer(this.scene.time, Number.MAX_VALUE, null, function(sceneTime, timerTime, taskObject) {
          console.log(self.playerHpText.text);
          hp.setText("HP: " + Player.hp);
          return score.setText("SCORE: " + Player.score);
        }, null);
      };

      Application.prototype.setPlayerHpText = function() {
        return this.playerHpText = new CAAT.TextActor().setFont("20px Lucida sans").setLocation(20, 20).setOutline(false).enableEvents(true).setText('HP: 100');
      };

      Application.prototype.setPlayerScoreText = function() {
        return this.playerScoreText = new CAAT.TextActor().setFont("20px Lucida sans").setLocation(120, 20).setOutline(false).enableEvents(false).setText('SCORE: 0');
      };

      return Application;

    })(CAAT.Director);
    director = new Application;
    return director.preloadApplication();
  };

}).call(this);
